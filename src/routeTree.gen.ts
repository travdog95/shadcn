/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WardlistImport } from './routes/wardlist'
import { Route as UsersImport } from './routes/users'
import { Route as SpeakertrackerImport } from './routes/speakertracker'
import { Route as SacramentmeetingsImport } from './routes/sacramentmeetings'
import { Route as PrayertrackerImport } from './routes/prayertracker'
import { Route as MigrationImport } from './routes/migration'
import { Route as MemberslistImport } from './routes/memberslist'
import { Route as DatafilesImport } from './routes/datafiles'
import { Route as CallingsworkshopImport } from './routes/callingsworkshop'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const WardlistRoute = WardlistImport.update({
  id: '/wardlist',
  path: '/wardlist',
  getParentRoute: () => rootRoute,
} as any)

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const SpeakertrackerRoute = SpeakertrackerImport.update({
  id: '/speakertracker',
  path: '/speakertracker',
  getParentRoute: () => rootRoute,
} as any)

const SacramentmeetingsRoute = SacramentmeetingsImport.update({
  id: '/sacramentmeetings',
  path: '/sacramentmeetings',
  getParentRoute: () => rootRoute,
} as any)

const PrayertrackerRoute = PrayertrackerImport.update({
  id: '/prayertracker',
  path: '/prayertracker',
  getParentRoute: () => rootRoute,
} as any)

const MigrationRoute = MigrationImport.update({
  id: '/migration',
  path: '/migration',
  getParentRoute: () => rootRoute,
} as any)

const MemberslistRoute = MemberslistImport.update({
  id: '/memberslist',
  path: '/memberslist',
  getParentRoute: () => rootRoute,
} as any)

const DatafilesRoute = DatafilesImport.update({
  id: '/datafiles',
  path: '/datafiles',
  getParentRoute: () => rootRoute,
} as any)

const CallingsworkshopRoute = CallingsworkshopImport.update({
  id: '/callingsworkshop',
  path: '/callingsworkshop',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/callingsworkshop': {
      id: '/callingsworkshop'
      path: '/callingsworkshop'
      fullPath: '/callingsworkshop'
      preLoaderRoute: typeof CallingsworkshopImport
      parentRoute: typeof rootRoute
    }
    '/datafiles': {
      id: '/datafiles'
      path: '/datafiles'
      fullPath: '/datafiles'
      preLoaderRoute: typeof DatafilesImport
      parentRoute: typeof rootRoute
    }
    '/memberslist': {
      id: '/memberslist'
      path: '/memberslist'
      fullPath: '/memberslist'
      preLoaderRoute: typeof MemberslistImport
      parentRoute: typeof rootRoute
    }
    '/migration': {
      id: '/migration'
      path: '/migration'
      fullPath: '/migration'
      preLoaderRoute: typeof MigrationImport
      parentRoute: typeof rootRoute
    }
    '/prayertracker': {
      id: '/prayertracker'
      path: '/prayertracker'
      fullPath: '/prayertracker'
      preLoaderRoute: typeof PrayertrackerImport
      parentRoute: typeof rootRoute
    }
    '/sacramentmeetings': {
      id: '/sacramentmeetings'
      path: '/sacramentmeetings'
      fullPath: '/sacramentmeetings'
      preLoaderRoute: typeof SacramentmeetingsImport
      parentRoute: typeof rootRoute
    }
    '/speakertracker': {
      id: '/speakertracker'
      path: '/speakertracker'
      fullPath: '/speakertracker'
      preLoaderRoute: typeof SpeakertrackerImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/wardlist': {
      id: '/wardlist'
      path: '/wardlist'
      fullPath: '/wardlist'
      preLoaderRoute: typeof WardlistImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/callingsworkshop': typeof CallingsworkshopRoute
  '/datafiles': typeof DatafilesRoute
  '/memberslist': typeof MemberslistRoute
  '/migration': typeof MigrationRoute
  '/prayertracker': typeof PrayertrackerRoute
  '/sacramentmeetings': typeof SacramentmeetingsRoute
  '/speakertracker': typeof SpeakertrackerRoute
  '/users': typeof UsersRoute
  '/wardlist': typeof WardlistRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/callingsworkshop': typeof CallingsworkshopRoute
  '/datafiles': typeof DatafilesRoute
  '/memberslist': typeof MemberslistRoute
  '/migration': typeof MigrationRoute
  '/prayertracker': typeof PrayertrackerRoute
  '/sacramentmeetings': typeof SacramentmeetingsRoute
  '/speakertracker': typeof SpeakertrackerRoute
  '/users': typeof UsersRoute
  '/wardlist': typeof WardlistRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/callingsworkshop': typeof CallingsworkshopRoute
  '/datafiles': typeof DatafilesRoute
  '/memberslist': typeof MemberslistRoute
  '/migration': typeof MigrationRoute
  '/prayertracker': typeof PrayertrackerRoute
  '/sacramentmeetings': typeof SacramentmeetingsRoute
  '/speakertracker': typeof SpeakertrackerRoute
  '/users': typeof UsersRoute
  '/wardlist': typeof WardlistRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/callingsworkshop'
    | '/datafiles'
    | '/memberslist'
    | '/migration'
    | '/prayertracker'
    | '/sacramentmeetings'
    | '/speakertracker'
    | '/users'
    | '/wardlist'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/callingsworkshop'
    | '/datafiles'
    | '/memberslist'
    | '/migration'
    | '/prayertracker'
    | '/sacramentmeetings'
    | '/speakertracker'
    | '/users'
    | '/wardlist'
  id:
    | '__root__'
    | '/'
    | '/callingsworkshop'
    | '/datafiles'
    | '/memberslist'
    | '/migration'
    | '/prayertracker'
    | '/sacramentmeetings'
    | '/speakertracker'
    | '/users'
    | '/wardlist'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CallingsworkshopRoute: typeof CallingsworkshopRoute
  DatafilesRoute: typeof DatafilesRoute
  MemberslistRoute: typeof MemberslistRoute
  MigrationRoute: typeof MigrationRoute
  PrayertrackerRoute: typeof PrayertrackerRoute
  SacramentmeetingsRoute: typeof SacramentmeetingsRoute
  SpeakertrackerRoute: typeof SpeakertrackerRoute
  UsersRoute: typeof UsersRoute
  WardlistRoute: typeof WardlistRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CallingsworkshopRoute: CallingsworkshopRoute,
  DatafilesRoute: DatafilesRoute,
  MemberslistRoute: MemberslistRoute,
  MigrationRoute: MigrationRoute,
  PrayertrackerRoute: PrayertrackerRoute,
  SacramentmeetingsRoute: SacramentmeetingsRoute,
  SpeakertrackerRoute: SpeakertrackerRoute,
  UsersRoute: UsersRoute,
  WardlistRoute: WardlistRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/callingsworkshop",
        "/datafiles",
        "/memberslist",
        "/migration",
        "/prayertracker",
        "/sacramentmeetings",
        "/speakertracker",
        "/users",
        "/wardlist"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/callingsworkshop": {
      "filePath": "callingsworkshop.tsx"
    },
    "/datafiles": {
      "filePath": "datafiles.tsx"
    },
    "/memberslist": {
      "filePath": "memberslist.tsx"
    },
    "/migration": {
      "filePath": "migration.tsx"
    },
    "/prayertracker": {
      "filePath": "prayertracker.tsx"
    },
    "/sacramentmeetings": {
      "filePath": "sacramentmeetings.tsx"
    },
    "/speakertracker": {
      "filePath": "speakertracker.tsx"
    },
    "/users": {
      "filePath": "users.tsx"
    },
    "/wardlist": {
      "filePath": "wardlist.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
